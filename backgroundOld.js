//This runs the Simple chat. Todo implement the img loader too.
//  Connect this all to Feldspar.
//      Connect to internet first.
//          Load search results into img gen.
//              PLace img gen results on Feldspar.
const { exec } = require("child_process");
const fs = require('fs');

function runPythonScript(scriptPath, args) {
    const formattedArgs = args.map(arg => `"${arg}"`).join(' ');
    return new Promise((resolve, reject) => {
        exec(`/opt/homebrew/bin/python3 ${scriptPath} ${formattedArgs}`, (error, stdout, stderr) => {
            if (error) {
                reject(`exec error: ${error}`);
                return;
            }
            if (stderr) {
                reject(`stderr: ${stderr}`);
                return;
            }
            resolve(stdout);
        });
    });
}

function parseRecommendations(chatOutput) {
    const lines = chatOutput.split('\n').filter(line => line.trim()); // Split by newlines and remove empty lines
    const numbers = lines.filter(line => /^\d/.test(line)).map(line => line.match(/^\d+\.?\s*(.+)/)[1]);
    const letters = lines.filter(line => /^[A-Z]/.test(line)).map(line => line.match(/^[A-Z]\.\s*(.+)/)[1]);

    return numbers.map((num, index) => `${num} and ${letters[index]}`);
}

function extractImgUrl(imgGenOutput) {
    try {
        const imgGenData = JSON.parse(imgGenOutput);
        return imgGenData.url;
    } catch (error) {
        console.error("Error parsing JSON:", error);
        return null;
    }
}



async function main() {
    try {
        // Run simpleChat.py and print its results
        const chatOutput = await runPythonScript("Ai/simpleChat.py", ["Healdsburg"]);
        console.log("simpleChat.py Output:", chatOutput);
        
        // Extract movie titles from the chat output
        const movieTitles = chatOutput.split('\n')
                              .filter(line => /^\d/.test(line))
                              .map(line => {
                                  const match = line.match(/^\d+\.\s*(.+)/);
                                  return match ? match[1] : '';
                              });

        let htmlContent = fs.readFileSync("Feldspar.html", "utf-8");

        // Generate images and perform Google searches for each movie title
        for (let i = 0; i < movieTitles.length; i++) {
            const title = movieTitles[i];

            const imgGenOutput = await runPythonScript("Ai/imgGen.py", [title]);
            const imgUrl = extractImgUrl(imgGenOutput);
            console.log(`Image URL for ${title}: ${imgUrl}`); // Debugging

            const searchOutput = await runPythonScript("my_googlesearch.py", [title]);
            const searchLink = JSON.parse(searchOutput).top_link;
            console.log(`Google Link for ${title}: ${searchLink}`); // Debugging

            // Replacement logic
            htmlContent = htmlContent.replace(`IMAGE_URL_${i+1}`, imgUrl);
            htmlContent = htmlContent.replace(`GOOGLE_LINK_${i+1}`, searchLink);
        }

        console.log(htmlContent); // Debugging: Check the final HTML content

        fs.writeFileSync("Feldspar.html", htmlContent);
    } catch (error) {
        console.error(error);
    }
}
main();


//TODO add another parser for the URL generated by imgGen, load that URL into Feldspar.html.
//check if this is in the right order with simpleprompt.py
// runPythonScript("/Users/quaidbulloch/Documents/Code/Feldspar/my_googlesearch.py", ["arg1", "arg2"])
// Correct usage with an array of arguments
// runPythonScript("/Users/quaidbulloch/Documents/Code/Feldspar/Ai/simpleChat.py", ["Greatest Japanese movies"]);

// runPythonScript("/Users/quaidbulloch/Documents/Code/Feldspar/Ai/simpleChat.py", "Greatest Japanese movies");

//extract header from search
// do it in the reverse order. Chat determines the three things to look up.
// order the three things from hardest to easiest in the prompt.

// // Example usage:
// runPythonScript("/Users/quaidbulloch/Documents/Code/Feldspar/my_googlesearch.py", "Your Google Search Query");
// runPythonScript("/Users/quaidbulloch/Documents/Code/Feldspar/Ai/imgGen.py", "Your Image Generation Input");


//Link this to google
//get google results as a link
//either interpret those link results as an image, extract auxillery data from the url search, or simply interpret the image based on the original prompt (easiest, test rest later.)

//Todo  Get imgGen to run with the first part of the openAI prompt, i.e. extend the parser to work with the 123 part.
//run img gen with 1, 2, and 3 seperatly then paste the respective images as links to the url in the box on feldspar.html!
    //The following line is outdated and wrong.
    //returned 3 links for each part! Woah, means the left to right thing can be for all three for media! Since each has all work to leisure parts. Later. Rn just get the basics.